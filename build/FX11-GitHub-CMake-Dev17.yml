# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
#
# http://go.microsoft.com/fwlink/?LinkId=271568

# Builds the library using CMake.

trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - '*.md'
    - LICENSE
    - '.github/*'

pr:
  branches:
    include:
    - main
  paths:
    exclude:
    - '*.md'
    - LICENSE
    - '.github/*'
  drafts: false

resources:
  repositories:
  - repository: self
    type: git
    ref: refs/heads/main

name: $(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

variables:
  Codeql.Enabled: false
  VS_GENERATOR: 'Visual Studio 17 2022'
  VC_PATH: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC'
  WIN11_SDK: '10.0.22000.0'

pool:
  vmImage: windows-2022

jobs:
- job: CMAKE_BUILD
  displayName: CMake using VS Generator
  steps:
  - checkout: self
    clean: true
    fetchTags: false
  - task: CMake@1
    displayName: 'CMake (MSVC): Config x64'
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: '-G "$(VS_GENERATOR)" -A x64 -B out -DCMAKE_SYSTEM_VERSION=$(WIN11_SDK)'
  - task: CMake@1
    displayName: 'CMake (MSVC): Build x64 Debug'
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out -v --config Debug
  - task: CMake@1
    displayName: 'CMake (MSVC): Build x64 Release'
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out -v --config RelWithDebInfo
  - task: CMake@1
    displayName: 'CMake (MSVC): Config x86'
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: '-G "$(VS_GENERATOR)" -A Win32 -B out2 -DCMAKE_SYSTEM_VERSION=$(WIN11_SDK)'
  - task: CMake@1
    displayName: 'CMake (MSVC): Build x86 Debug'
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out2 -v --config Debug
  - task: CMake@1
    displayName: 'CMake (MSVC): Build x86 Release'
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out2 -v --config RelWithDebInfo
  - task: CMake@1
    displayName: 'CMake (MSVC): Config ARM64'
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: '-G "$(VS_GENERATOR)" -A ARM64 -B out3 -DCMAKE_SYSTEM_VERSION=$(WIN11_SDK)'
  - task: CMake@1
    displayName: 'CMake (MSVC): Build ARM64 Debug'
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out3 -v --config Debug
  - task: CMake@1
    displayName: 'CMake (MSVC): Build ARM64 Release'
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out3 -v --config RelWithDebInfo
  - task: CMake@1
    displayName: 'CMake (UWP): Config x64'
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: '-G "$(VS_GENERATOR)" -A x64 -B out4 -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0'
  - task: CMake@1
    displayName: 'CMake (UWP): Build x64'
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out4 -v
  - task: CMake@1
    displayName: 'CMake (ClangCl): Config x64'
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: '-G "$(VS_GENERATOR)" -A x64 -T clangcl -B out6 -DCMAKE_SYSTEM_VERSION=$(WIN11_SDK)'
  - task: CMake@1
    displayName: 'CMake (ClangCl): Build x64 Debug'
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out6 -v --config Debug
  - task: CMake@1
    displayName: 'CMake (ClangCl): Build x64 Release'
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out6 -v --config RelWithDebInfo
  - task: CMake@1
    displayName: 'CMake (MSVC Spectre): Config x64'
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: '-G "$(VS_GENERATOR)" -A x64 -B out7 -DENABLE_SPECTRE_MITIGATION=ON -DCMAKE_SYSTEM_VERSION=$(WIN11_SDK)'
  - task: CMake@1
    displayName: 'CMake (MSVC Spectre): Build x64 Debug'
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out7 -v --config Debug
  - task: CMake@1
    displayName: 'CMake (MSVC Spectre): Build x64 Release'
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out7 -v --config RelWithDebInfo


- job: CMAKE_BUILD_X64
  displayName: 'CMake for X64'
  timeoutInMinutes: 60
  workspace:
    clean: all
  steps:
  - checkout: self
    clean: true
    fetchTags: false
  - task: CmdLine@2
    displayName: Setup environment for CMake to use VS
    inputs:
      script: |
        call "$(VC_PATH)\Auxiliary\Build\vcvars64.bat"
        echo ##vso[task.setvariable variable=WindowsSdkVerBinPath;]%WindowsSdkVerBinPath%
        echo ##vso[task.prependpath]%VSINSTALLDIR%Common7\IDE\CommonExtensions\Microsoft\CMake\Ninja
        echo ##vso[task.prependpath]%VCINSTALLDIR%Tools\Llvm\x64\bin
        echo ##vso[task.prependpath]%WindowsSdkBinPath%x64
        echo ##vso[task.prependpath]%WindowsSdkVerBinPath%x64
        echo ##vso[task.prependpath]%VCToolsInstallDir%bin\Hostx64\x64
        echo ##vso[task.setvariable variable=EXTERNAL_INCLUDE;]%EXTERNAL_INCLUDE%
        echo ##vso[task.setvariable variable=INCLUDE;]%INCLUDE%
        echo ##vso[task.setvariable variable=LIB;]%LIB%

  - task: CMake@1
    displayName: CMake (MSVC; x64-Debug) Config
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --preset=x64-Debug
  - task: CMake@1
    displayName: CMake (MSVC; x64-Debug) Build
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out/build/x64-Debug -v
  - task: DeleteFiles@1
    inputs:
      Contents: 'out'
  - task: CMake@1
    displayName: CMake (MSVC; x64-Release) Config
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --preset=x64-Release
  - task: CMake@1
    displayName: CMake (MSVC; x64-Release) Build
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out/build/x64-Release -v
  - task: DeleteFiles@1
    inputs:
      Contents: 'out'
  - task: CMake@1
    displayName: CMake (clang/LLVM; x64-Debug) Config
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --preset=x64-Debug-Clang
  - task: CMake@1
    displayName: CMake (clang/LLVM; x64-Debug) Build
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out/build/x64-Debug-Clang -v
  - task: DeleteFiles@1
    inputs:
      Contents: 'out'
  - task: CMake@1
    displayName: CMake (clang/LLVM; x64-Release) Config
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --preset=x64-Release-Clang
  - task: CMake@1
    displayName: CMake (clang/LLVM; x64-Release) Build
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out/build/x64-Release-Clang -v

- job: CMAKE_BUILD_ARM64
  displayName: 'CMake for ARM64'
  timeoutInMinutes: 60
  workspace:
    clean: all
  steps:
  - checkout: self
    clean: true
    fetchTags: false
  - task: CmdLine@2
    displayName: Setup environment for CMake to use VS
    inputs:
      script: |
        call "$(VC_PATH)\Auxiliary\Build\vcvarsamd64_arm64.bat"
        echo ##vso[task.setvariable variable=WindowsSdkVerBinPath;]%WindowsSdkVerBinPath%
        echo ##vso[task.prependpath]%VSINSTALLDIR%Common7\IDE\CommonExtensions\Microsoft\CMake\Ninja
        echo ##vso[task.prependpath]%VCINSTALLDIR%Tools\Llvm\x64\bin
        echo ##vso[task.prependpath]%WindowsSdkBinPath%x64
        echo ##vso[task.prependpath]%WindowsSdkVerBinPath%x64
        echo ##vso[task.prependpath]%VCToolsInstallDir%bin\Hostx64\arm64
        echo ##vso[task.setvariable variable=EXTERNAL_INCLUDE;]%EXTERNAL_INCLUDE%
        echo ##vso[task.setvariable variable=INCLUDE;]%INCLUDE%
        echo ##vso[task.setvariable variable=LIB;]%LIB%

  - task: CMake@1
    displayName: CMake (MSVC; arm64-Debug) Config
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --preset=arm64-Debug
  - task: CMake@1
    displayName: CMake (MSVC; arm64-Debug) Build
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out/build/arm64-Debug -v
  - task: DeleteFiles@1
    inputs:
      Contents: 'out'
  - task: CMake@1
    displayName: CMake (MSVC; arm64-Release) Config
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --preset=arm64-Release
  - task: CMake@1
    displayName: CMake (MSVC; arm64-Release) Build
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out/build/arm64-Release -v
  - task: DeleteFiles@1
    inputs:
      Contents: 'out'
  - task: CMake@1
    displayName: CMake (clang/LLVM; arm64-Debug) Config
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --preset=arm64-Debug-Clang
  - task: CMake@1
    displayName: CMake (clang/LLVM; arm64-Debug) Build
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out/build/arm64-Debug-Clang -v
  - task: DeleteFiles@1
    inputs:
      Contents: 'out'
  - task: CMake@1
    displayName: CMake (clang/LLVM; arm64-Release) Config
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --preset=arm64-Release-Clang
  - task: CMake@1
    displayName: CMake (clang/LLVM; arm64-Release) Build
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out/build/arm64-Release-Clang -v
  - task: DeleteFiles@1
    inputs:
      Contents: 'out'
  - task: CMake@1
    displayName: CMake (MSVC; arm64ec-Debug) Config
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --preset=arm64ec-Debug
  - task: CMake@1
    displayName: CMake (MSVC; arm64ec-Debug) Build
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out/build/arm64ec-Debug -v
  - task: DeleteFiles@1
    inputs:
      Contents: 'out'
  - task: CMake@1
    displayName: CMake (MSVC; arm64ec-Release) Config
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --preset=arm64ec-Release
  - task: CMake@1
    displayName: CMake (MSVC; arm64ec-Release) Build
    inputs:
      cwd: '$(Build.SourcesDirectory)'
      cmakeArgs: --build out/build/arm64ec-Release -v
